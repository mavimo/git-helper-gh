#!/usr/bin/env bash

# check whether current directory is inside a git repository
is_git_repo() {
  git rev-parse --show-toplevel > /dev/null 2>&1
  result=$?
  if test $result != 0; then
    >&2 echo 'Not a git repo!'
    exit $result
  fi
}

urlencode() {
    # urlencode <string>
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

SED_COMMAND=sed
if command -v gsed 1>/dev/null ; then
    SED_COMMAND=gsed
fi

is_git_repo

# Extract some basic infos
GH_API_URL="https://api.github.com"
GH_BASE_URL="https://github.com"

GH_PROJECT=$( git config --get gh.project )
GH_TOKEN=$( git config --get gh.token )
GH_USERNAME=$( git config --get gh.username )

if [ "" == "$GH_USERNAME" ]; then
    echo 'Configure your github username with'
    echo ''
    echo '    git config --add gh.username YOURNAME'
    echo ''
    exit 1
fi

if [ "" == "$GH_TOKEN" ]; then
    echo 'Configure your github token with'
    echo ''
    echo '    git config --add gh.token GITHUB_TOKEN'
    echo ''
    echo 'You can get token on https://github.com/settings/tokens'
    echo ''
    exit 1
fi

if [ "" == "$GH_PROJECT" ]; then
    echo 'Configure your github project name with'
    echo ''
    echo '    git config --add gh.project PROJECT/NAME'
    echo ''
    exit 1
fi

CURRENT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
BASE_BRANCH_NAME=${1:-$(git show-branch 2>/dev/null | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | $SED_COMMAND 's/.*\[\(.*\)\].*/\1/' | $SED_COMMAND 's/[\^~].*//')}

ISSUE_ID=$(echo $CURRENT_BRANCH_NAME | $SED_COMMAND -r 's/^[feature|fix]*\/([0-9]+|TECH)\-[a-zA-Z0-9\-]*$/\1/g' )

if [ "$ISSUE_ID" == "TECH" ]; then
    ISSUE_TITLE=""
    ISSUE_MILESTONE="next-release"
    ISSUE_LABELS="area/TECH"

    # Generate PR infos
    PR_TITLE="refs #$ISSUE_ID: $ISSUE_TITLE"
    PR_BODY="
<!-- ARE YOU SURE WE DON'T HAVE AN ISSUE FOR IT -->

### Relevant commits/breaking changes

  - $ISSUE_TITLE

### Database migrations

  - no

### Integration notes

  - no

### Deploy instructions

  - standard

### Checks

  - [ ] I manually tested the feature
  - [ ] I wrote automatic tests
  - [ ] I wrote fixtures for it <!-- remove if not needed -->
  - [ ] I wrote API doc for it  <!-- remove if not needed -->
  - [ ] I documented how to test it for QA in issue
  - [ ] I do a commit cleanup before ask for PR (each commits reference the issue, there are no WIP commit messages, squashed similar commits, ..)

"
else
    # Get issue infos
    ISSUE_INFO=$( curl --silent -H "Authorization: token $GH_TOKEN" "$GH_API_URL/repos/$GH_PROJECT/issues/$ISSUE_ID" )

    ISSUE_TITLE=$(echo $ISSUE_INFO | jq -r .title)
    ISSUE_MILESTONE=$(echo $ISSUE_INFO | jq -r .milestone.title)
    TMP_LABELS=$(echo $ISSUE_INFO | jq -r '[.labels[].name]|join(",")')
    ISSUE_LABELS=$(urlencode "$TMP_LABELS")

    # Generate PR infos
    PR_TITLE=$(urlencode "refs #$ISSUE_ID: $ISSUE_TITLE")
    PR_BODY=$(urlencode "Closes #$ISSUE_ID

### Relevant commits/breaking changes

  - $ISSUE_TITLE

### Database migrations

  - no

### Integration notes

  - no

### Deploy instructions

  - standard

### Checks

  - [ ] I manually tested the feature
  - [ ] I wrote automatic tests
  - [ ] I wrote fixtures for it <!-- remove if not needed -->
  - [ ] I wrote API doc for it  <!-- remove if not needed -->
  - [ ] I documented how to test it for QA in issue
  - [ ] I do a commit cleanup before ask for PR
")
fi

URL="$GH_BASE_URL/$GH_PROJECT/compare/$BASE_BRANCH_NAME...$CURRENT_BRANCH_NAME"
URL="$URL?expand=1"
URL="$URL&pull_request[title]=$PR_TITLE"
URL="$URL&pull_request[body]=$PR_BODY"
URL="$URL&labels=$ISSUE_LABELS"
URL="$URL&milestone=$ISSUE_MILESTONE"
URL="$URL&assignee=$GH_USERNAME"

open "$URL"
